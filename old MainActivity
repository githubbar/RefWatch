package com.databelay.refwatch // Your phone app's package name

import android.app.Application
import android.content.Context
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.viewModels
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import com.databelay.refwatch.auth.AuthScreen
import com.databelay.refwatch.auth.AuthState
import com.databelay.refwatch.auth.AuthViewModel
import com.databelay.refwatch.common.Game
import com.databelay.refwatch.common.SimpleIcsEvent
import com.databelay.refwatch.common.theme.RefWatchMobileTheme
import com.databelay.refwatch.games.GameListScreen
import com.databelay.refwatch.games.MobileGameViewModel
import com.google.android.gms.wearable.CapabilityClient
import com.google.android.gms.wearable.ChannelClient
import com.google.android.gms.wearable.Wearable
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.withContext
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import java.io.BufferedReader
import java.io.InputStreamReader
import java.io.OutputStream
import java.time.ZoneId
import dagger.hilt.android.AndroidEntryPoint // <<<< IMPORT THIS

// --- Constants for Wearable Communication ---
private const val TAG = "RefWatchCompanion"
private const val GAME_SETTINGS_TRANSFER_PATH = "/game_settings_data" // Must match Wear OS app
private const val WEAR_APP_CAPABILITY = "refwatch_wear_app"   // Must match Wear OS app's wear.xml
private const val DEBUG_ASSET_ICS_FILENAME = "referee_assignments.ics" // Name of the file in assets

// Helper to read text content from URI
suspend fun readTextFromUri(context: Context, uri: Uri): String? { // Ensure this is defined
    return withContext(Dispatchers.IO) {
        try {
            context.contentResolver.openInputStream(uri)?.use { inputStream ->
                BufferedReader(InputStreamReader(inputStream)).use { reader ->
                    reader.readText()
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error reading text from URI $uri", e)
            null
        }
    }
}
// Helper to read text content from Assets
suspend fun readTextFromAssets(context: Context, fileName: String): String? { // Ensure this is defined
    return withContext(Dispatchers.IO) {
        try {
            context.assets.open(fileName).use { inputStream ->
                BufferedReader(InputStreamReader(inputStream)).use { reader ->
                    reader.readText()
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error reading text from assets file $fileName", e)
            null
        }
    }
}

@AndroidEntryPoint // <<<< ADD THIS ANNOTATION
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // If AppContent is a Composable that itself uses hiltViewModel() to get these,
        // you don't even need to get them here.
        // If AppContent NEEDS them passed as parameters (as your current AppContent signature suggests),
        // then this is the correct way to obtain them in MainActivity:
        // val authViewModel: AuthViewModel by viewModels()
        // val mobileGameViewModel: MobileGameViewModel by viewModels()
        // If AppContent calls hiltViewModel(), then the lines above are not strictly needed
        // unless MainActivity itself also needs to directly interact with these ViewModels.

        setContent {
            RefWatchMobileTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    // Option A: Pass ViewModels obtained by MainActivity (as your current AppContent expects)
                    // This requires the by viewModels() declarations above to be active.
                    // val authViewModelInstance: AuthViewModel by viewModels()
                    // val mobileGameViewModelInstance: MobileGameViewModel by viewModels()
                    // AppContent(authViewModelInstance, mobileGameViewModelInstance)

                    // Option B: AppContent itself gets the ViewModels using hiltViewModel()
                    // This means AppContent would not take them as parameters.
                    AppContent() // Modify AppContent to use hiltViewModel() internally
                }
            }
        }
    }
}

@Composable
fun AppContent(
    // Option A: Receiving ViewModels as parameters
    // authViewModel: AuthViewModel,
    // mobileGameViewModel: MobileGameViewModel

    // Option B: Getting ViewModels internally using hiltViewModel()
    // No parameters needed here for the ViewModels if using hiltViewModel()
) {
    // Option B Implementation:
    val authViewModel: AuthViewModel = hiltViewModel()
    val mobileGameViewModel: MobileGameViewModel = hiltViewModel()

    val authState by authViewModel.authState.collectAsState() // Assuming authState is exposed by AuthViewModel

    // Your when (authState) block remains the same
    when (val state = authState) {
        is AuthState.Loading -> {
 ...
 }
        is AuthState.Authenticated -> {
            // User is authenticated, show game list or main content
            // Make sure MobileGameViewModel is notified of the authenticated user
            // This should happen automatically if MobileGameViewModel observes AuthViewModel's currentUser
            // or if MainActivity/AppContent calls mobileGameViewModel.onUserChanged(state.user)
            // Example call (if needed based on your MobileGameViewModel setup):
             LaunchedEffect(state.user) {
                 mobileGameViewModel.onUserChanged(state.user)
             }

            val games by mobileGameViewModel.gamesList.collectAsState()
            GameListScreen(
                games = games,
                onAddGame = {
                    val newGame = Game() // Use no-arg constructor
                    mobileGameViewModel.addOrUpdateGame(newGame) // Corrected method name
                },
                 onDeleteGame = { gameToDelete -> mobileGameViewModel.deleteGame(gameToDelete) }, // Assuming deleteGame takes Game object
                onSignOut = { authViewModel.signOut() },
                onImportGames = {
                    // Example:
                    val icsEvents = listOf(
                        SimpleIcsEvent("""
                            BEGIN:VEVENT
                            DTSTAMP:20250327T113750Z
                            UID:4829e374-f5e1-48d1-8c21-044404e66152
                            DTSTART;TZID=America/New_York:20250329T143000
                            DTEND;TZID=America/New_York:20250329T163000
                            SUMMARY:Referee Assignment: Asst Referee 1 - 3071 Cutters SC U18 Boys Red v
                            s.  Indy Eleven 2007/2008B White - ISL SPRING 2025 (11U-19/20U\, All Divis
                            ions)
                            END:VEVENT """),
                        SimpleIcsEvent("""
                            BEGIN:VEVENT
                            DTSTAMP:20250327T113750Z
                            UID:826d01cc-f123-4018-bbd3-08c820b36cc6
                            DTSTART;TZID=America/New_York:20250330T130000
                            DTEND;TZID=America/New_York:20250330T144500
                            SUMMARY:Referee Assignment: Referee - 2846 Cutters SC 2009/10 Boys Red vs.
                              SCSA Eleven 2009B Red - ISL SPRING 2025 (11U-19/20U\, All Divisions)
                            END:VEVENT""")
                    )
                    // Convert SimpleIcsEvent to Game
                    val gamesToImport = icsEvents.map { Game(it) } // Assuming Game has a constructor taking SimpleIcsEvent
                    mobileGameViewModel.addOrUpdateGames(gamesToImport) // Corrected method name
                }
            )
        }
        is AuthState.Unauthenticated -> {
            AuthScreen(authViewModel = authViewModel) // AuthScreen likely needs AuthViewModel
        }
        is AuthState.Error -> {
 ...
 }
    }
}


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CompanionScreen() {
    val context = LocalContext.current
    var isLoading by remember { mutableStateOf(false) }
    var statusMessage by remember { mutableStateOf<String?>(null) }
    val coroutineScope = rememberCoroutineScope()

    // Managing the list directly in the Composable
    var parsedGameList by remember { mutableStateOf(emptyList<Game>()) }

    fun parseIcsContentAndUpdateUi(icsContent: String?, source: String) {
        isLoading = true
        try {
            if (icsContent == null) {
                statusMessage = "Error: Could not read file content from $source."
                parsedGameList = emptyList()
                return
            }
            val simpleIcsEvents = SimpleIcsParser.parse(icsContent) // Assuming SimpleIcsParser is accessible
            val gameSettings = convertSimpleIcsToGameSettings(simpleIcsEvents, context) // Pass context if needed for defaults
            // Add games to existing list of games (ignore duplicates by ID or by gameDateTimeEpochMillis)
            parsedGameList = (parsedGameList + gameSettings).distinctBy { it.id }.distinctBy { it.gameDateTimeEpochMillis }.sortedBy { it.gameDateTimeEpochMillis }

            statusMessage = if (gameSettings.isNotEmpty()) {
                "ICS parsed successfully from $source: ${gameSettings.size} games found."
            } else {
                "No games found in the ICS file from $source or parsing failed."
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error parsing or processing ICS from $source", e)
            statusMessage = "Error parsing $source: ${e.localizedMessage}"
//            parsedGameSettingsList = emptyList()
        } finally {
            isLoading = false
        }
    }


    // Function to handle processing the URI
    val processUriAndParse = { uri: Uri, sourceDescription: String ->
        isLoading = true
        statusMessage = "Reading ICS file from $sourceDescription..."
//        parsedGameSettingsList = emptyList()
        coroutineScope.launch {
            val icsContent = readTextFromUri(context, uri)
            parseIcsContentAndUpdateUi(icsContent, sourceDescription)
        }
    }

    val filePickerLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetContent(),
        onResult = { uri: Uri? ->
            uri?.let {
                processUriAndParse(it, "ICS File From Dialog")
                Log.d(TAG, "ICS File loaded: $it")
                isLoading = true
                statusMessage = "Loaded games from file..."
            } ?: run {
                Log.d(TAG, "No file selected.")
                statusMessage = "File selection cancelled."
            }
        }
    )

    // Function to handle loading from assets
    val loadFromAssetsAndParse = {
        Log.d(TAG, "Processing ICS File from Assets: $DEBUG_ASSET_ICS_FILENAME")
        isLoading = true
        statusMessage = "Reading ICS file from assets..."
        parsedGameList  = emptyList<Game>() // Be explicit when resetting

        coroutineScope.launch {
            val icsContent = readTextFromAssets(context, DEBUG_ASSET_ICS_FILENAME)
            parseIcsContentAndUpdateUi(icsContent, "assets")
        }
    }


}


suspend fun sendGameSettingsListToWear(context: Context, games: List<Game>): Boolean {
    if (games.isEmpty()) {
        Log.d(TAG, "Game list is empty, not sending.")
        withContext(Dispatchers.Main) {
            Toast.makeText(context, "No games to send.", Toast.LENGTH_SHORT).show()
        }
        return true // Or false, depending on desired behavior for empty list
    }
    // Running on a background thread is good practice for wearable API calls
    return withContext(Dispatchers.IO) {
        try {
            // 1. Find a connected Wear OS node that has your app
            val capabilityInfo = Wearable.getCapabilityClient(context)
                .getCapability(WEAR_APP_CAPABILITY, CapabilityClient.FILTER_REACHABLE)
                .await()

            val connectedNode = capabilityInfo.nodes.firstOrNull { it.isNearby } ?: capabilityInfo.nodes.firstOrNull()
            if (connectedNode == null) {
                Log.e(TAG, "No connected Wear OS node found with capability '$WEAR_APP_CAPABILITY'.")
                withContext(Dispatchers.Main) { Toast.makeText(context, "Watch not connected or app not installed.", Toast.LENGTH_LONG).show() }
                return@withContext false
            }
            Log.d(TAG, "Found node: ${connectedNode.displayName} (${connectedNode.id})")


            // 2. Open a Channel
            val channelClient = Wearable.getChannelClient(context)
            val channel: ChannelClient.Channel = channelClient.openChannel(
                connectedNode.id,
                GAME_SETTINGS_TRANSFER_PATH
            ).await()
            Log.d(TAG, "Channel opened to ${connectedNode.displayName}: ${channel.path}")

            // 3. Get an OutputStream from the Channel
            val outputStreamTask = channelClient.getOutputStream(channel)
            val outputStream: OutputStream = outputStreamTask.await() ?: run {
                Log.e(TAG, "Failed to get output stream for channel.")
                channelClient.close(channel).await()
                return@withContext false
            }


            // 4. Convert games list to JSON  and write to the OutputStream
            var success = false
            outputStream.use { os ->
                // Serialize the list to JSON
                val jsonString = Json.encodeToString(games)
                os.write(jsonString.toByteArray(Charsets.UTF_8))
                os.flush()
                Log.d(TAG, "Game settings JSON sent: ${jsonString.length} bytes")
                success = true
            }

            // 5. Close the Channel (closing the output stream doesn't close the channel)
            channelClient.close(channel).await()
            Log.d(TAG, "Channel closed.")
            //kotlinx.serialization.SerializationException: Serializer for class 'GameSettings' is not found.
            //Please ensure that class is marked as '@Serializable' and that the serialization compiler plugin is applied.
            if (success) {
                Log.d(TAG, "Games sent successfully.")
                return@withContext true
            } else {
                Log.e(TAG, "Games sending failed (stream issue or file not found).")
                return@withContext false
            }

        } catch (e: Exception) {
            Log.e(TAG, "Error sending game list", e)
            withContext(Dispatchers.Main) { Toast.makeText(context, "Error: ${e.localizedMessage}", Toast.LENGTH_LONG).show() }
            return@withContext false
        }
    }
}

@Composable
fun GameSettingsItem(game: Game) { // Now takes the shared GameSettings
    Column(modifier = Modifier.padding(vertical = 8.dp)) {
        Text("${game.homeTeamName} vs ${game.awayTeamName}",
            style = MaterialTheme.typography.bodyMedium,
            fontWeight = FontWeight.Bold,
            color =  MaterialTheme.colorScheme.error)
        game.ageGroup?.let {
            Text("Age Group: ${it.displayName}", style = MaterialTheme.typography.bodySmall,
                color =  MaterialTheme.colorScheme.tertiary)
        }
        game.formattedGameDateTime?.let {
            Text("Time: $it", style = MaterialTheme.typography.bodyMedium)
        }
        game.venue?.let {
            Text("Location: $it", style = MaterialTheme.typography.bodyMedium)
        }
        // You can add more details from GameSettings here
        // Row(verticalAlignment = Alignment.CenterVertically) {
        //     Box(modifier = Modifier.size(16.dp).background(game.homeTeamColor))
        //     Spacer(Modifier.width(4.dp))
        //     Text("Home", style = MaterialTheme.typography.bodySmall)
        //     Spacer(Modifier.width(8.dp))
        //     Box(modifier = Modifier.size(16.dp).background(game.awayTeamColor))
        //     Spacer(Modifier.width(4.dp))
        //     Text("Away", style = MaterialTheme.typography.bodySmall)
        // }
    }
}

// Helper to convert SimpleIcsEvents to GameSettingsForPhone
fun convertSimpleIcsToGameSettings(icsEvents: List<SimpleIcsEvent>, context: Context): List<Game> {
    // Using context for potential default color access from themes if needed, though GameSettings uses ARGB directly
    return icsEvents.mapNotNull { event ->
        if (event.summary == null || event.dtStart == null) {
            return@mapNotNull null
        }

        // Convert LocalDateTime to epoch milliseconds (UTC)
        val gameDateTimeEpoch = event.dtStart!!
            .atZone(ZoneId.systemDefault()) // Assuming ICS dtStart was parsed to system default
            .withZoneSameInstant(ZoneId.of("UTC")) // Convert to UTC
            .toInstant()
            .toEpochMilli()

        Game(icsEvent = event) // Use the new constructor
    }
}

